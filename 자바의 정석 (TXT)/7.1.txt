
1.1 상속의 정의와 장점

	왜 extends인가?

		: 확장하기 때문


	상속은 왜 중복방지로 유지보수와 일관성을 높이는가?
	
		: 자식들에게 공통되는 변수,메소드는 부모에서 수정하고 이걸 상속받게 함으로써 가능


1.2 클래스간의 관계 - 포함관계


	포함관계의 개념은?
	
		: 한 개념의 구성요소를 단위 클래스로 관리

	구현방식은?
		: 포함하는 클래스에서 포함대상인 클래스들을 생성하는 방식으로 구현

	장점은?
		: 클래스 작성도 쉽고, 코드도 간결하고 이해하기 쉽고, 단위클래스별로 코드가 작게 나뉘어 작성되어 있기 때문에 관리하는데도 수월하다
		: 즉, Divide and Conquer	


1.3 클래스간의 관계 결정하기

	
	상속으로 할지 포함관계로 할지 (상속관계/포함관계의 구별기준)
		: "자식"은 "부모"이다  vs "주체"는 "포함할 대상"을 가지고 있다. ("포함할 대상"으로 구성된다)
		: is-a  vs has-a 

		: 둘 중에 더 들어맞는게 무엇인지 생각해보고, 전자이면 상속/ 후자이면 포함
		: 예시 :: circle(원) vs point(점)
			- 원은 점이다 < 원은 점을 가지고 있다
			-> 포함관계

		: 예시2 :: SportsCar vs Car
			- 스포츠카는 자동차이다 > 스포츠카는 자동차로 구성되어 있다
			-> 상속관계
				

	관계를 많이 맺어야 하나??
		: 프로그램의 모든 클래스를 분석하여, 가능한 한 많은 관계를 맺도록 노력해야 한다
		: 그 이유는, 코드의 재사용성을 높이기 위해



1.4 단일 상속
	
	다중 상속
		- 장점
			- C++에서는 허용
			- 여러 클래스로부터 상속받을 수 있기 때문에 복합적인 기능을 가진 클래스를 쉽게 작성 가능
		- 단점
			- 클래스 간의 관계가 매우 복잡해진다
			- 서로 다른 클래스로부터 상속받은 멤버 간의 이름이 같은 경우 구별할 방법이 없다


	단일 상속 
		- 자바는 다중상속의 문제점을 해결하기 위해 다중상속의 장점을 포기하고 단일 상속만 허용한다.
		- 효과
			: 클래스 간의 관계가 보다 명확해지고, 코드를 더욱 신뢰할 수 있게 만들어준다.

		- 다중 상속과 유사한 기능을 구현하는 방법
			: 334p 예제 7-4
			: 상속관계 + 포함관계를 mix
			: 하나는 상속, 나머지는 생성자를 사용해서 포함관계로써 내부에 편입시킨다.



1.5 Object클래스 - 모든 클래스의 조상
	- 모든 클래스 상속계층도의 최상위에 있는 조상클래스
	- 다른 클래스로부터 상속받지 않는 모든 클래스들은 자동적으로 Object클래스로부터 상속받게 됨 
		: 다른 클래스로부터 상속받는 클래스라 하더라도, 조상클래스를 찾아가다 보면 마지막 최상위 조상은 Object 클래스가 됨.
	- 모든 클래스에서는 Object클래스의 멤버들을 상속받으므로, Object클래스의 11개의 메서드를 사용할 수 있음 ( toString, equals 등)
	