2.3
	- Ajax
		- 자바스크립트를 이용ㅎ애 서버와 브라우저가 비동기 방식으로 데이터를 교환할 수 있는 통신 기능
		- 웹페이지에서 변경할 필요가 없는 부분은 다시 렌더링하지 않고, 서버로부터 필요한 데이터만 전송받아 변경해야 하는 부분만 한정적으로 렌더링하는 방식이 가능해짐.
		- 이로써 웹 브라우저에서도 데스크톱 애플리케이션과 유사한 빠른 성능과 부드러운 화면 전환이 가능해졌다.

	- jQuery

	- V8 자바스크립트 엔진

	- Node.js
		- 브라우저의 자바스크립트 엔진에서만 동작하던 자바스크립트를 브라우저 이외의 환경에서도 동작할 수 있도록, 자바스크립트 엔진을 브라우저에서 독립시킨 자바 스크립트 실행 환경.
		- 자바스크립트가 브라우저를 벗어나 서버 사이드 어플리케이션 개발에서도 사용할 수 있는 범용 프로그래밍 언어가 된 계기
	
	- SPA 프레임워크 (Single Page Application)
		- Angular, React, Vue.js, Svelte 등

2.5 자바스크립트의 특징
	: 인터프리터 언어
	
	- 컴파일러 언어
		- 코드 실행 전의 컴파일 타임에 소스코드 전체를 한번에 머신코드로 변환한 후 실행한다
		- 실행파일을 생성한다.
		- 컴파일 단계와 실행 단계가 분리되어 있다. 명시적인 컴파일 단계를 거치고, 명시적으로 실행파일을 실행한다
		- 컴파일과 실행단계가 분리되어 있으므로 코드 실행속도가 빠르다.
	
	- 인터프리터 언어
		- 코드가 실행되는 런타임 단계에서 한 줄씩  중간코드인 바이트코드로 변환한 후 실행한다.
		- 실행파일을 생성하지 않는다.
		- 인터프리트 단계와 실행단계가 분리되어 있지 않다.
		- 인터프리터는 한줄 씩 바이트코드로 변환하고 즉시 실행한다.
		- 코드가 실행될 때마다 인터프리트 과정이 반복 수행된다.
		- 인터프리트 단계와 실행단계가 분리되어 있지 않고 반복 수행되므로, 코드 실행 속도가 비교적 느리다.

	
	- 대부분의 모던 브라우저에서 사용되는 인터프리터는 명시적인 컴파일 단계를 거치지는 않지만, 과정 일부를 거치며 일부 소스코드를 컴파일하고 실행하는 방식으로 처리 속도를 높이고 있다.
		: 인터프리터 언어의 장점인 동적 기능 지원을 살리면서 실행속도가 느리다는 단점을 극복한다. 현재는 컴파일러와 인터프리터의 기술적 구분이 점차 모호해져 가는 추세다.
		
	- 명령형(imperative), 함수형(functional), 프로토타입 기반(prototype-based) 객체지향 프로그래밍을 지원하는 멀티 패터다임 프로그래밍 언어
	
	- 클래스 기반 객체지향 언어보다 효율적이면서 강력한 '프로토타입 기반의 객체지향 언어'
