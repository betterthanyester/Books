4.1 변수란 무엇인가? 왜 필요한가?

	- 컴퓨터는 연산과 기억을 수행하는 부품이 나눠져 있다.
		- CPU를 사용해 연산
		- 메모리를 사용해 데이터를 기억

	
	- 메모리 
		- 데이터를 저장할 수 있는 메모리 셀 (memory cell) 의 집합체
		- 메모리 셀 하나의 크기는 1바이트(8비트)
		- 컴퓨터는 메모리 셀의 크기 (1바이트 단위)로 데이터를 저장(save)하거나 읽어들인다(read).
		- 각 셀은 고유의 메모리 주소(address)를 갖는다. 
	
	- 컴퓨터는 모든 데이터를 2진수로 처리한다. 따라서 메모리에 저장되는 데이터는 데이터의 종류（숫자. 텍스 트, 이미지. 동영상 등）와 상관없이 모두 2진수로 저장된다.
	


	- 연산 결과는 메모리에 저장되지만, 저장된 메모리 공간에 직접 접근하는 것 외에는 해당 값을 재사용할 방법이 없다.
	- 그러나 메모리 주소를 통해 값에 직접 접근하는 것은 치명적인 오류를 발생시킬 수 있는 위험한 일이다. 따라서 자바스크립트는 개발자의 직접적인 메모리 제어를 허용하지 않는다.
	
	- 또한 메모리 제어를 허용하더라도 값이 저장되는 메모리 주소는 코드 실행 시의 메모리 상황에 따라 임의로 결정된다. 따라서 메모리 주소를 알 수도 없고 알려주지도 않는다. 

	- 재사용을 가능케 하는 메커니즘이 변수이다.

	- 변수
		: 하나의 값을 저장하기 위해 확보한 메모리 공간 자체 또는 그 메모리 공간을 식별하기 위해 붙인 이름

		: 값이 저장된 메모리 공간에 상징적인 이름을 붙인 것

	- 할당
		: 변수에 값을 저장하는 것
	- 참조
		: 변수에 저장된 값을 읽어 들이는 것
	


4.2 식별자
	- 식별자
		: 변수/함수/클래스 등의 이름
		: 어떤 값을 구별해서 식별할 수 있는 고유한 이름
	

4.3 변수 선언
	- 변수를 생성하는 것
	- 값을 저장하기 위한 메모리 공간을 확보하고 변수 이름과 확보된 메모리 공간의 주소를 연결해서 값을 저장할 수 있게 준비하는 것
	
	- 변수 선언에 의해 확보된 메모리 공간은 확보가 해제되기 전까지는 누구도 확보된 메모리 공간을 사용할 수 없도록 보호되므로 안전하게 사용할 수 있다.
	
	- 변수선언 키워드
		- var, let, const
		- ES6에서는 let과 const 키워드를 var의 여러 단점을 보완

	- 변수 선언에 의해 확보된 메모리 공간에서는 자바스크립트 엔진에 의해 undefined라는 값이 암묵적으로 할당되어 초기화된다.


	- ReferenceError (참조에러)
		: 선언하지 않은 식별자에 접근하는 경우 발생하는 에러



4.4 변수 선언의 실행 시점과 변수 호이스팅
	
	- 자바스크립트 엔진은 소스코드를 한 줄씩 순차적으로 실행하기에 앞서 (즉, 런타임 이전에) 먼저 소스코드의 평가 과정을 거치면서 소스코드를 실행하기 위한 준비를 한다.
	- 소스코드 실행 준비단계인 소스코드 평가과정에서 자바스크립트 엔진은 변수 선언을 포함한 모든 선언문(변수 선언문, 함수 선언문 등)을 소스코드에서 찾아내 먼저 실행한다. 
	- 소스코드 평가과정이 끝나면 비로소 모든 선언문을 제외하고 소스코드를 한 줄 씩 순차적으로 실행한다.

	- 변수 호이스팅 (variable hoisting)
		: 변수 선언문이 코드의 선두로 끌어 올려진 것처럼 동작하는 자바스크립트 고유의 특징


4.5 값의 할당
	- 변수 선언은 런타임 이전에 실행되지만, 값의 할당은 런타임에 실행된다.



4.6 값의 재할당
	- 이미 값이 할당되어 있는 변수에 새로운 값을 또다시 할당하는 것
	
	- 상수
		- 값을 재할당할 수 없어 변수에 저장된 값을 변경할 수 없는 경우
		- 단 한번만 할당할 수 있는 변수
		- const 키워드

	- 재할당한다고 해서 기존의 멤리 공간을 지우고 그 공간에 재할당하는 것이 아니라, 새로운 메모리 공간을 확보하고 그 메모리 공간에 새로운 값을 저장함
	- 더 이상 사용되지 않는 메모리는 가비지 콜렉터 (garbage collector)에 의해 해제되지만, 언제 해제될지는 예측 불가


	- 언매니지드 언어 vs 매니지드 언어
		- 메모리 관리 방식에 따라 분류
		
		- 언매니지드 언어
			- C언어 등
			- 개발자가 명시적으로 메모리를 할당하고 해제하기 위해 malloc(), free()같은 저수준 메모리 제어 기능을 제공
			- 메모리 제어를 개발자가 주도할 수 있으므로 개발자 역량에 따라 최적의 성능을 확보할 수 있지만, 그 반대의 경우 치명적 오류를 생산할 가능성도 있다.
			
		- 매니지드 언어
			- 자바스크립트 등
			- 메모리 관리를 언어 차원에서 담당하고, 개발자에게 허용하지 않음
			- 더 이상 사용하지 않는 메모리의 해제는 가비지 콜렉터가 수행하고 개발자는 관여 불가
			- 개발자의 역량에 의존하는 부분이 상대적으로 작아져 일정한 생산성을 확보하는 장점이 있음
			- 성능 면에서 어느 정도의 손실은 감수해야 한다는 단점이 있음




4.7 식별자 네이밍 규칙
	- 특수문자를 제외한 문자, 숫자, 언더스코어( _ ), 달러 기호($)를 포함할 수 있다
	- 숫자로 시작하는 것은 허용하지 않음
	- 예약어는 식별자로 사용 불가
		- 예약어 : 프로그래밍 언어에서 사용되고 있거나 사용 예정인 단어

	- 변수 이름은 변수의 존재 목적을 쉽게 이해할 수 있도록 의미를 명확히 표현해야 한다.
		: 변수 선언에 별도의 주석이 필요하다면 변수의 존재 목적을 명확히 드러내지 못하는 것이다.


	- 네이밍 컨벤션 (naming convention)
		1) 카멜 케이스 (camelCase)
		2) 스네이크 케이스 (snake_case)
		3) 파스칼 케이스 (PascalCase)
		4) 헝가리안 케이스 (typeHungarianCase)


	- 자바스크립트에서는 일반적으로
		- 변수, 함수 이름 : 카멜 케이스
		- 생성자 함수, 클래스 이름 : 파스칼 케이스 



























