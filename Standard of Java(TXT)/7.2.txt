2.1 오버라이딩이란?
	
	- 의미
		: 조상 클래스로부터 상속받은 메서드의 내용을 변경하는 것
		: 자손 클래스 자신에 맞게 상속받은 메서드를 변경해야 하는 경우 사용


2.2. 오버라이딩의 조건
	
	- 자손 클래스에서 오버라이딩하는 메서드는 조상클래스의 메서드와 
		1) 이름이 같아야 한다
		2) 매개변수가 같아야 한다
		3) 반환타입이 같아야 한다
		
	
	
	- 불가능한 것
		1) 접근 제어자는 조상 클래스의 메서드보다 좁은 범위로 변경할 수 없다
			- 조상 클래스 메서드의 접근 제어자 = protected인 경우
				: 오버라이딩하는 자손 클래스의 메서드는 접근 제어자가 protected 또는 public이어야 한다.
			- 대부분의 경우 같은 범위의 접근 제어자를 사용한다
			- 접근 제어자의 범위 : public > protected > (default) > private	
	
		2) 조상 클래스의 메서드보다 많은 수의 예외를 선언할 수 없다.
			- 이때 "많다"는 것은 단순한 선언 개수가 아니다. "Exception"은 모든 예외의 최고 조상으로 가장 많은 개수의 예외를 던질 수 있도록 선언한 것이기 때문에, 부모는 특정 Exception만은 선언했으나 자손이 'Exception'을 선언했다면 하나로 보여도 하나가 아니다...

		3) 인스턴스메서드를 static메서드로, 또는 그 반대로 변경할 수 없다.

		
	- static메서드는 자신들이 정의된 클래스에 묶여 있다.
		- 조상클래스에 정의된 static메서드를 자손 클래스에서 똑같은 이름의 static메서드로 정의할 수 있으나, 이것은 오버라이딩이 아니라 각 클래스에 별개의 static메서드를 정의한 것일 뿐이다.

	
2.3. 오버로딩 vs 오버라이딩

	- 오버로딩
		: 기존에 없는 새로운 메서드를 추가하는 것  (new)
	
	- 오버라이딩
		: 조상으로부터 상속받은 메서드의 내용을 변경하는 것 (change, modify)




2.4. super

	- 의미
		: 자손 클래스에서 조상 클래스로부터 상속받은 멤버를 참조하는데 사용되는 참조변수
	
	- 용도 
		- 상속받은 멤버와 자신의 멤버가 이름이 같을 때 super를 붙여서 구별
		
	- this와 비교
		- this : 멤버변수와 지역변수의 이름이 같을 때 this를 붙여서 구별
		- this와 super는 근본적으로는 기능이 같다. 변수의 구별을 위한 용도로 사용하는 것이고, 그것이 같은 클래스 내에서의 멤버변수 vs 지역변수인지, 아니면 조상과 자손 간의 멤버변수의 구별인지의 차이일 뿐이다.
		- 모든 인스턴스 메서드에서는 자신이 속한 인스턴스의 주소가 지역변수로 저장되는데, 이것이 참조변수 this와 super의 값이 된다.
		- static 메서드 (클래스 메서드)는 인스턴스와 관련이 없다.
			: 따라서 this와 마찬가지로 super 역시 static 메서드에서는 사용할 수 없고, 인스턴스 메서드에서만 사용할 수 있다. 


	- 자손클래스에서 상속된 멤버변수를 재정의하거나, 상속된 메서드를 오버라이딩 한 경우, this 와 super가 가리키는 변수/메서드가 달라진다.
	 

2.5 super( ) - 조상 클래스의 생성자

	- this( ) 와의 비교
		: this()는 같은 클래스의 다른 생성자를 호출하는 데 사용되지만, super()는 조상클래스의 생성자를 호출하는데 사용된다.
	- 생성자의 첫 줄에서 조상클래스의 생성자를 호출해야 한다
		- 이유
			: 자손 클래스의 인스턴스가 직접적으로 조상클래스의 멤버들을 사용하는 경우, 또는 인스턴스가 사용하는 자손클래스의 멤버가 조상클래스의 멤버를 사용하는 경우, 조상의 멤버들이 먼저 초기화되어 있어야 하기 때문
		- 이러한 조상클래스 생성자의 호출은 클래스의 상속관계를 거슬러 올라가면서 계속 반복되고, 마지막 최고 조상인 Object클래스의 생성자 Object()에 이르러서야 끝이 난다.
		
		- 따라서 Object클래스를 제외한 모든 클래스 생성자는 첫 줄에 반드시 자신의 다른 생성자 또는 조상의 생성자를 호출해야 한다. 

			: Object 클래스를 제외한 모든 클래스의 생성자 첫 줄에 생성자 this( )  또는 super( ) 를 호출해야 한다
		
