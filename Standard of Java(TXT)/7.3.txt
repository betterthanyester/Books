3.1  패키지
	
	- 의미 
		: 클래스의 묶음
	
	- 유용성
		- 서로 관련된 클래스들끼리 그룹 단위로 묶어 놓음으로써 클래스를 효율적으로 관리
		- 같은 이름의 클래스일지라도 서로 다른 패키지에 존재하는 것이 가능하므로, 다른 개발자가 개발한 라이브러리의 클래스와 이름이 충돌하는 것을 피할 수 있다.
		
	- 클래스의 실제 이름 (full name)
		= 클래스명을 포함
		- ex) java.lang.String
			: java.lang 패키지에 속한 String 클래스

		
## jar파일 (.jar) 
	: 클래스 파일들을 압축한 것



	- 패키지 관련 규칙
		1) 하나의 소스파일에는 첫 번째 문장으로 단 한 번의 패키지 선언만을 허용한다. 
		2) 모든 클래스는 반드시 하나의 패키지에 속해야 한다.
		3) 패키지는 점( . )을 구분자로 하여 계층구조로 구성할 수 있다. 
		4) 패키지는 물리적으로 클래스 파일 (.class) 을 포함하는 하나의 디렉토리이다.


3.2  패키지의 선언
	
	- 방법 
		: 클래스나 인터페이스 소스파일(.java)의 맨 위에 " package 패키지명; " 한 줄을 작성
	
	- 규칙
		- 반드시 소스파일에서 주석과 공백을 제외한 첫번째 문장이어야 함
		- 하나의 소스파일에 단 한번만 선언 가능
		- 해당 소스파일에 포함된 모든 클래스/인터페이스는 선언된 패키지에 속하게 됨
	
	- '이름없는 패키지 (unnamed package)'
		- 자바에서는 소스파일 작성 시 패키지를 선언하지 않고도 아무런 문제가 없는데, 이는 자바에서 기본적으로 제공하는 '이름없는 패키지' 때문이다.
		- 소스파일에 자신이 속할 패키지를 지정하지 않은 클래스는 자동적으로 ’이름 없는 패키지'에 속하게 된다. 결국 패키지를 지정하지 않는 모든 클래스들은 같은 패키지에 속하는 셈이다.
		- 간단한 프로그램은 패키지를 지정하지 않아도 별 문제 없지만, 큰 프로젝트나 Java API와 같은 클래스 라이브러리를 작성하는 경우에는 미리 패키지를 구성하여 적용해야한다.


3.3 import문

	- 유용성
		: 다른 패키지의 클래스를 사용할 때, import문으로 사용하고자 하는 클래스의 패키지를 명시해주면 클래스이름에서 패키지명을 생략할 수 있다.
		: import문은 모든 클래스이름 앞에 패키지명을 붙여 준다.
		: 이클립스는 단축키 " Ctrl + Shift + O"를 누르면 자동으로 import문을 추가해주는 편리한 기능을 제공한다.


## import문은 프로그램의 성능에 전혀 영향을 미치지 않는다. I⑴00드문을 많이 사용하면 컴파일 시간이 아주 조금 더 걸릴 뿐이다.

3.4 import문의 선언
	- import문은 package문 다음에, 그리고 클래스 선언문 이전에 위치해야 한다.
	- import문은 package문과 달리 한 소스파일에 여러 번 선언할 수 있다.
	

	- 일반적인 소스파일 (.java)의 구성 순서
		1) package문
		2) import문
		3) 클래스 선언
	
	- import문 선언 방식
		1) import 패키지명.클래스명 : 해당 패키지의 특정 클래스를 사용
		
		2) import 패키지명.*  : 해당 패키지의 모든 클래스를 사용
			- 그러나 클래스의 이름 대신 ‘*’을 사용하는 것이 하위 패키지의 클래스까지 포함하는 것은 아니다
			- 예컨대 import java.util.* 과 import java.text.*을  import java.* 로 한번에 처리할 수는 없다.

		- 예외) java.lang 패키지
			:  모든 소스파일에는 묵시적으로 "import java.lang.* " 이 선언되어 있다. 이는 해당 패키지가 매우 빈번히 사용되는 중요한 클래스들이 속한 패키지이기 때문에 따로 import하지 않아도 되도록 한 것이다.
			: 따라서 해당 패키지의 클래스인 System이나 String 등은 패키지명 없이 사용할 수 있다.


3.5 static import문
	
	- 기능
		: 해당 클래스의 static멤버를 호출할 때, 클래스 이름을 생략할 수 있다.
		: 특정 클래스이 static멤버를 자주 사용할 때 편리하다
	
	- 선언방식
		1) import static java.패키지명.클래스명.변수명 : 불러올때 "변수명" 만 사용
		2) import static java.패키지명.클래스명.*    : 불러올때 "클래스명.변수명" 사용



