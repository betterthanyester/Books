1 java.lang 패키지
	- 자바프로그래밍에 가장 기본이 되는 클래스들을 포함
	- import문 없이도 사용 가능
	
1.1. Object 클래스
	- 모든 클래스의 최고 조상
		-> Object클래스의 멤버들은 모든 클래스에서 바로 사용 가능
	- 멤버변수 없음. 오직 11개의 메서드만 있음
	
	- equals(Object obj)
		- 주소값으로 비교를 함
		- 값이 같아도 서로 다른 인스턴스 객체를 비교한 결과 = false
			-> 방법 : equals메서드를 오버라이딩

			-> 실제로 오버라이딩으로 String, integer등에서 구현되어 있음

	- hashCode( ) 
		- 객체의 주소값으로 해시코드를 만들어 반환
		- 32비트 JVM에서는 서로 다른 두 객체는 같은 해시코드를 가질 수 없음
		- 64비트 JVM에서는 8바이트 주소값으로 해시코드(4바이트)를 만들기 때문에 해시코드가 중복될 수 있음

		- 클래스의 인스턴스변수 값으로 객체의 같고 다름을 판단해야 하는 경우라면 equals메서드 뿐만 아니라 hashCode메서드도 적절히 오버라이딩해야 한다.
			- String클래스는 문자열의 내용이 같으면 같은  hashCode를 반환하도록 오버라이딩 되어 있음
			- 한편, System.identityHashCode(Object x)는 Object클래스의 hashCode메서드처럼 객체의 주소값으로 해시코드를 생성하기 때문에 모든 객체에 대해 항상 다른 hashCode 값을 반환
	
	- toString( )
		- 인스턴스에 대한 정보를 String으로 제공할 목적으로 정의
		- 인스턴스 변수에 저장된 값들을 문자열로 표현한다는 뜻
		- 클래스 작성 시 toString( )을 오버라이딩하지 않는다면, Object클래스에 정의된 toString()이 호출됨
			: 클래스이름 + "@" + 16진수 해시코드
		- 일반적으로 인스턴스나 클래스에 대한 정보 또는 인스턴스 변수의 값을 문자열로 변환하여 반환하도록 오버라이딩되어 있음

	- clone( )
		- 자신을 복제하여 새로운 인스턴스를 생성
		- 원래의 인스턴스는 보존하고, 새로운 인스턴스를 생성하여 작업하면 작업이전의 값이 보존되고, 작업에 실패해서 원래 상태로 되돌리거나 변경되기 전의 값을 참고하는데 도움이 됨
		- 단순히 인스턴스 변수의 값만 복사하기 때문에 참조타입의 인스턴스 변수가 있는 클래스는 완전한 인스턴스 복제가 이루어지지 않는다.
			: 예를 들어 배열의 경우, 복제된 인스턴스도 같은 배열의 주소를 갖기 떄문에 복제된 인스턴스의 작업이 원래의 인스턴스에 영향을 미치게 된다. 
			: 따라서 이런 경우 clone메서드를 오버라이딩해서 새로운 배열을 생성하고 배열의 내용을 복사하도록 해야 한다.
		- cloneable 인터페이스를 구현한 클래스에서만 clone( )을 호출할 수 있다.
	
	- 공변 반환타입
		- 오버라이딩할 때 조상 메서드의 반환타입을 자손 클래스의 타입으로 변경을 허용하는 것


	- 얕은 복사와 깊은 복사
		- 얕은 복사 (Shallow copy)
			- clone( )은 단순히 객체에 저장된 값을 그래도 복제할 뿐, 객체가 참조하고 있는 객체까지 복제하지는 않는다.
			- 객체배열을 clone( )으로 복제하는 경우 원본과 복제본이 같은 객체를 공유하므로 완전한 복제라 보기 어렵다.
			- 원본을 변경하면 복사본도 영향을 받는다.

		- 깊은 복사 (deep copy)
			- 원본과 복사본이 서로 다른 객체를 참조하므로 원본의 변경이 복사본에 영향을 미치지 않는다.
			- 구현방법
				: 새로운 객체를 만들어서 복사본이 그것을 참조하게 함


	- getClass( ) 
		- 자신이 속한 클래스의 Class 객체를 반환하는 메서드
		-  파일 형태로 저장되어 있는 클래스를 읽어서 Class클래스에 정의된 형식으로 변환하는 것.



1.2 String 클래스
