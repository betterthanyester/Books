8 내부 클래스 (inner class)
	- 클래스 내에 선언되는 클래스
	- 사용빈도가 높지 않음



8.1 내부 클래스란?
	- 클래스에 다른 클래스를 선언하는 이유
		: 두 클래스가 서로 긴밀한 관계에 있기 때문
		: 한 클래스를 다른 클래스의 내부 클래스로 선언하면 두 클래스의 멤버들 간에 서로 쉽게 접근할 수 있다는 장점
		: 외부에는 불필요한 클래스를 감춤으로써 코드의 복잡성을 줄일 수 있다는 장점
	
		-> 장점
			1) 내부 클래스에서 외부 클래스의 멤버들을 쉽게 접근할 수 있다.
			2) 코드의 복잡성을 줄일 수 있다 (캡슐화)
	
	
8.2 내부 클래스의 종류와 특징
	- 변수의 선언 위치에 따른 종류와 같다
	- 종류
		- 인스턴스 클래스
			: 외부 클래스의 멤버변수 선언위치에 선언하며, 외부 클래스의 인스턴스멤버처럼 다루어진다.
		- static 클래스
			: 외부 클래스의 멤버변수 선언위치에 선언하며, 외부 클래스의 static멤버처럼 다루어진다.
		- local 클래스
			: 외부 클래스의 메서드나 초기화블럭 안에 선언하며, 선언된 영역 내부에서만 사용될 수 있다.
		- 익명 (anonymous) 클래스
			: 클래스의 선언과 객체의 생성을 동시에 하는 이름없는 클래스 (일회용)


8.3 내부 클래스의 선언


8.4 내부 클래스의 제어자와 접근성
	- 내부클래스 중 static클래스만 static 멤버를 가질 수 있다.
	- 다만 final과 static이 동시에 붙은 변수는 상수이므로, 모든 내부 클래스에서 정의가 가능

	- 인스턴스 멤버는 같은 클래스에 있는 인스턴스멤버와 static멤버 모두 직접 호출이 가능하지만, static멤버는 인스턴스멤버를 직접 호출할 수 없는 것처럼
	- 인스턴스클래스는 외부 클래스의 인스턴스멤버를 객체생성 없이 바로 사용할 수 있지만, static 클래스는 외부 클래스의 인스턴스 멤버를 객체생성 없이 사용할 수 없다.
	- 마찬가지로 인스턴스 클래스는 static클래스의 멤버들을 객체생성 없이 사용할 수 있지만, static 클래스에서는 인스턴스 클래스의 멤버들을 객체생성 없이 사용할 수 없다.

	- 내부 클래스와 외부 클래스에 선언된 변수의 이름이 같을 때 변수 앞에 'this' 또는 '외부 클래스명.this'를 붙여 서로 구별 가능

8.5 익명 클래스 (anonymous class)
	- 다른 내부 클래스들과 달리 이름이 없다.
	- 클래스의 선언과 객체의 생성을 동시에 하기 때문에, 단 한번만 사용될 수 있고 오직 하나의 객체만 생성할 수 있는, 일회용 클래스
	- 이름이 없기 때문에 생성자를 가질 수 없음
	- 조상클래스의 이름이나, 구현하고자 하는 인터페이스의 이름을 사용해서 정의 
		: 따라서 하나의 클래스로 상속받는 동시에 인터페이스를 구현하거나 둘 이상의 인터페이스를 구현할 수 없음
		: 오로지 단 하나의 클래스를 상속받거나, 단 하나의 인터페이스만을 구현할 수 있음

	- 익명클래스는 이름이 없기 때문에, '외부 클래스명$숫자.class'의 형식으로 클래스파일명이 결정됨

